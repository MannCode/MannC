===============================================
                # MANN-8Bit #
===============================================

===== Overview =====
* 8 Bit data width
* 16 Bit Address Width (Improve that later)
* 256 Byte of memory
* No I/O right now

====== identifiers in code =====
$ - Hexadecimal Number
% - Binary Number
"" (nothing) or anything else - Decimal Number
# - Imidiate value (Not an address)

===== Instructions =====
== NOP ==
%00000000:$00: NOP ..


== Load/Store ==
* Note : Imidiate value and address are both 2 bytes

%000001XX: LDA^ -> "Load to A register"
    %00: $4 : "Imidiate"
    %01: $5 : "address"
    %10: $6 : "address + X"
    %11: $7 : "address + Y"
%000010XX: LDX^ -> "Load to X register"
    %00: $8 : "Imidiate"
    %01: $9 : "address"
    %10: $B : "address + Y"
%000011XX: LDY^ -> "Load to Y register"
    %00: $C : "Imidiate"
    %01: $D : "address"
    %10: $E : "address + X"
%000100XX: STA -> "Store A to mem"
    %00: $11 : "address"
    %01: $12 : "address + X"
    %10: $13 : "address + Y"
%000101XX: STX -> "Store X to mem"
    %00: $15 : "address"
    %01: $17 : "address + Y"
%000110XX: STY -> "Store Y to mem"
    %00: $19 : "address"
    %01: $1A : "address + X"


== Transfer Register ==
%00011100:$1C: TAX^ -> "Transfer A to X" (1 Byte)
%00100000:$20: TAY^ -> "Transfer A to Y" (1 Byte)
%00100100:$24: TXA^ -> "Transfer X to A" (1 Byte)
%00101000:$28: TYA^ -> "Transfer Y to A" (1 Byte)

== Stack operation ==
%00101100:$2C: TSX^ -> "Transfer Stack pointer to X" (1 Byte)
%00110000:$30: TXS -> "Transfer X to Stack pointer" (1 Byte)
%00110100:$34: PHA -> "Push A to Stack" (1 Byte)
%00111000:$38: PLA^ -> "Pull Stack to A" (1 Byte)

== Logical ==
%001111XX: AND^ -> "AND the A"
    %00: $3C : "Imidiate"
    %01: $3D : "address"
    %10: $3E : "address + X"
    %11: $3F : "address + Y"
%010000XX: ORA^ -> "OR the A"
    %00: $40 : "Imidiate"
    %01: $41 : "address"
    %10: $42 : "address + X"
    %11: $43 : "address + Y"
%010001XX: XOR^ -> "XOR the A"
    %00: $44 : "Imidiate"
    %01: $45 : "address"
    %10: $46 : "address + X"
    %11: $47 : "address + Y"

== Arithmetic ==
%010010XX: ADD^ -> "Add A with ->"
    %00: $48 : "Imidiate"
    %01: $49 : "address"
    %10: $4A : "address + X"
    %11: $4B : "address + Y"
%010011XX: SUB^ -> "Sub A with ->"
    %00: $4C : "Imidiate"
    %01: $4D : "address"
    %10: $4E : "address + X"
    %11: $4F : "address + Y"
%010100XX: CMP^ -> "Compare A with ->" ("if A >= B -> Carry flag is set")
    %00: $50 : "Imidiate"
    %01: $51 : "address"
    %10: $52 : "address + X"
    %11: $53 : "address + Y"
%010101XX: CPX^ -> "Compare X with ->"
    %00: $54 : "Imidiate"
    %01: $55 : "address"
    %10: $57 : "address + Y"
%010110XX: CPY^ -> "Compare Y with ->"
    %00: $58 : "Imidiate"
    %01: $59 : "address"
    %10: $5A : "address + X"

== Increament/Decrement ==
%010111XX: INC^ -> "INC location in memory"
    %01: $5D : "address"
    %10: $5E : "address + X"
    %11: $5F : "address + Y"
%011000XX:$60: INX^ -> "INC X"
%011001XX:$64: INY^ -> "INC Y"
%011010XX: DEC^ -> "DEC location in memory"
    %01: $69 : "address"
    %10: $6A : "address + X"
    %11: $6B : "address + Y"
%011011XX:$6C: DEX^ -> "DEC X"
%011100XX:$70: DEY^ -> "DEC Y"

== Jump ==
%011101XX:$75: JMP -> "Jump to a mem address"
%011110XX:$79: JSR -> "jump to subroutine setting stack"
%011111XX:$7C: RTS -> "return to subroutine resetting stack"

== Condition Jump/Branches ==
%100000XX:$81: BCC -> "if carry flag clear"
%100001XX:$85: BCS -> "if carry flag set"
%100010XX:$89: BNE -> "if zero flag clear"
%100011XX:$8D: BEQ -> "if zero flag set"

== STA, STX, STY, LDA, LDX, LDY (Continuing) ==
%100101XX: STA :
    %00 : $94 : "[Indirect], 0"
    %01 : $95 : "[Indirect], X"
    %10 : $96 : "[Indirect], Y"
%100110XX: STX :
    %00 : $98 : "[Indirect], 0"
    %01 : $99 : "[Indirect], Y"
%100111XX: STY :
    %00 : $9C : "[Indirect], 0"
    %01 : $9D : "[Indirect], X"

%101000XX: LDA :
    %00 : $A0 : "[Indirect], 0"
    %01 : $A1 : "[Indirect], X"
    %10 : $A2 : "[Indirect], Y"
%101001XX: LDX :
    %00 : $A4 : "[Indirect], 0"
    %01 : $A5 : "[Indirect], Y"
%101010XX: LDY :
    %00 : $A8 : "[Indirect], 0"
    %01 : $A9 : "[Indirect], X"

== Bitwise Shift ==
%101011XX: SLA :
    %00 : $AC : "Imidiate"
%101100XX: SRA :
    %00 : $B0 : "Imitidate"

== CLEAR Screen ==
$FFFD: CLS -> "CLEAR screen:

== Display ==
$FFFE: DUP -> "Update Diplay"

== HLT ==
$FFFF : HLT -> "Halt computer"

"^" -> These Instructions set the Flags

===== Registers =====
A: GP register (2 byte) (Accumulator)
X: GP register (2 byte)
Y: GP register (2 byte)
SP: Stack Pointer (2 byte)
PC: Program Counter (2 byte)
F: Flags (3 bit)
    Carry
    Zero


===== Instruction Layout =====
Instruction Layout is 0xXXXX 0xYYYY
X : 2-byte Instruction identifier
    XXXXXYYY : X - Main instruction and Y - Clones of that Instruction
Y : 2-byte Memory Address [imm16/HL] (Some instruction use 8 bit address and some dont use address)

example : JMP 03 -> 0110 0011 -> 01100011

===== Memory Layout (Pixel Wise VRAM) =====
Total - 0xFFFF * 0x2 = 128 KB
0x0000 - 0x6DFF -> General RAM (55 KB)
0x6E00 - 0x6EFF -> Stack (512 Bytes)
0x6F00 - 0x6FFF -> I/O (512 Bytes)
0x7000 - 0xFFFF -> VRAM (72 KB)


Variable Storage -> 0x5A00 - 0x6DDF (5087)
Macro Variable Storage -> 0x6DE0 - 0x6DEF (15)
Intrupt Start -> 0x6DF0 - 0x6DFF (15)

for Bitmap
0x7000 - 0x7288

===== Screen Size =====
pixel - 256x144
bitmap - 36x18

===== Micro Code =====
HLT: Halt
MI: Memory In
RI: Ram In
RO: Ram Out
IO: Instruction Register Out
II: Instruction Register In
AI: A In
AO: A Out
SO: SUM Out
SU: Substract
BI: B In
OI: Output In
CE: Counter ++
CO: Counter Out
J:  Jump
FI: Flag In

======= Instruction To micro Code ======
* we have 8 steps cycle
* First Two cycle wil always be same So we include that in Fetch - (T0-T3)
* Condition Jump Uses flag register So We need to Include CF and ZF

* Fetch: MI|CO - RO|II|CE - MI|CO - CE

0: NOP ->         |     - |     - |
1: LDA ->         RO|MI - RO|AI - |
2: ADD ->         RO|MI - RO|BI - AI|SO|FI
3: SUB ->         RO|MI - RO|BI - AI|SO|SU|FI
4: STA ->         RO|MI - RI|AO - |
5: LDI ->         RO|AI - |     - |
6: JMP ->         RO|J  - |     - |
7: JC  -> CF=0 -> |     - |     - |
          CF=1 -> RO|J  - |     - |
8: JZ  -> ZF=0 -> |     - |     - |
          ZF=1 -> RO|J  - |     - |
....
E: OUT ->         AO|OI - |     - |
F: HLT ->         HLT   - |     - |